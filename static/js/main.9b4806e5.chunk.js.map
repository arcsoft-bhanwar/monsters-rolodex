{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","onSearchChange","event","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2TAGaA,EAAO,SAACC,GAAD,OAChB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,YCHbC,G,MAAW,SAACR,GACrB,OACE,qBAAKC,UAAU,YAAf,SACGD,EAAMS,SAASC,KAAI,SAACN,GAAD,OAClB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCLhBM,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACrB,uBAAOZ,UAAU,aAAaa,KAAK,SAASF,YAAaA,EAAaG,SAAUF,MCgCrEG,G,wDA9Bb,WAAYhB,GAAO,IAAD,8BAChB,cAAMA,IAUTiB,eAAiB,SAACC,GACjB,EAAKC,SAAS,CAACC,YAAYF,EAAMG,OAAOC,SAVtC,EAAKC,MAAM,CACTd,SAAS,GACTW,YAAY,IAJE,E,qDAOnB,WAAoB,IAAD,OACjBI,MAAM,8CAA8CC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC7EF,MAAK,SAAAG,GAAK,OAAE,EAAKT,SAAS,CAACV,SAASmB,S,oBAKtC,WAAS,IAAD,EAC0BC,KAAKN,MAA9Bd,EADD,EACCA,SAAUW,EADX,EACWA,YACXU,EAAmBrB,EAASsB,QAAO,SAAA3B,GAAO,OAC9CA,EAAQE,KAAK0B,cAAcC,SAASb,EAAYY,kBAElD,OACE,sBAAK/B,UAAU,MAAf,UACE,kDACD,cAAC,EAAD,CAAWW,YAAY,kBAAkBC,aAAcgB,KAAKZ,iBAC3D,cAAC,EAAD,CAAUR,SAAUqB,W,GAxBVI,cCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.9b4806e5.chunk.js","sourcesContent":["import React from 'react';\nimport './card.styles.css'\n\nexport const Card = (props) => (\n    <div className='card-container'>\n        <img alt='monster' src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\n        <h2>{props.monster.name}</h2>\n        <p>{props.monster.email}</p>\n    </div>\n)","import react from 'react';\nimport {Card} from '../card/card.component'\nimport './card-list.styles.css'\n\nexport const CardList = (props)=>{\n    return (\n      <div className=\"card-list\">\n        {props.monsters.map((monster) => (\n          <Card key={monster.id} monster={monster} />\n        ))}\n      </div>\n    );\n}","import React from 'react';\nimport './search-box.styles.css'\n\nexport const SearchBox = ({placeholder, handleChange}) =>(\n    <input className='search-box' type='search' placeholder={placeholder} onChange={handleChange}/>\n) ","import React,{Component} from 'react';\nimport {CardList} from './components/card-list/card-list.component'\nimport {SearchBox} from './components/search-box/search-box.component'\nimport './App.css';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state={\n      monsters:[],\n      searchField:''\n    }\n  }\n componentDidMount(){\n   fetch('https://jsonplaceholder.typicode.com/users').then(response => response.json())\n   .then(users=>this.setState({monsters:users}))\n }\n onSearchChange = (event) =>{\n  this.setState({searchField:event.target.value})\n }\n  render(){\n    const {monsters, searchField} = this.state;\n    const filteredMonsters = monsters.filter(monster=>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n      )\n    return(\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n       <SearchBox placeholder='search monsters' handleChange={this.onSearchChange}/>\n        <CardList monsters={filteredMonsters}/>\n    </div>\n    )\n  }\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}